// <auto-generated />
using System;
using EngineCoreProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EngineCoreProject.Migrations
{
    [DbContext(typeof(EngineCoreDBContext))]
    [Migration("20210204155822_initaial")]
    partial class initaial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.seq", "'seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.SeqForPayment", "'SeqForPayment', '', '1000', '1', '1000', '9999999999999999', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.SequenceForMeetingId", "'SequenceForMeetingId', '', '100000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EngineCoreProject.Models.AdmAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionTypeId")
                        .HasColumnName("action_type_id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("Shortcut")
                        .HasColumnName("shortcut")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.ToTable("adm_action");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Fee")
                        .HasColumnName("fee")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int?>("ServiceKindNo")
                        .HasColumnName("service_kind_no")
                        .HasColumnType("int");

                    b.Property<string>("Shortcut")
                        .HasColumnName("shortcut")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UgId")
                        .HasColumnName("ug_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ServiceKindNo");

                    b.ToTable("adm_service");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Fee")
                        .HasColumnName("fee")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodForArchive")
                        .HasColumnName("period_for_archive")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodForLate")
                        .HasColumnName("period_for_late")
                        .HasColumnType("int");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int?>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("int");

                    b.Property<string>("Shortcut")
                        .HasColumnName("shortcut")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StageTypeId")
                        .HasColumnName("stage_type_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartEffectiveDate")
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageTypeId");

                    b.ToTable("adm_stage");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmStageAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionId")
                        .HasColumnName("action_id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enabled")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Group")
                        .HasColumnName("group")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<byte?>("ShowOrder")
                        .HasColumnName("show_order")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StageId")
                        .HasColumnName("stage_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartEffectiveDate")
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("StageId");

                    b.ToTable("adm_stage_action");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmStageActionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnName("action_id")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ActionId", "RoleId")
                        .IsUnique()
                        .HasName("uq_adm_stage_action_role");

                    b.ToTable("adm_stage_action_role");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AppTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("ntext");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique()
                        .HasName("app_transaction_app_id_UN")
                        .HasFilter("[application_id] IS NOT NULL");

                    b.ToTable("app_transaction");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AppLastUpdateDate")
                        .HasColumnName("app_last_update_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ApplicationNo")
                        .HasColumnName("application_no")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrentStageId")
                        .HasColumnName("current_stage_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int?>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StateId")
                        .HasColumnName("state_id")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnName("template_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionEndDate")
                        .HasColumnName("transaction_end_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TransactionStartDate")
                        .HasColumnName("transaction_start_date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UnlimitedValidity")
                        .HasColumnName("unlimited_validity")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TemplateId");

                    b.ToTable("application");
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("int");

                    b.Property<int?>("AttachmentId")
                        .HasColumnName("attachment_id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("MimeType")
                        .HasColumnName("mime_type")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("Size")
                        .HasColumnName("size_")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("application_attachment");
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmiratesIdNo")
                        .IsRequired()
                        .HasColumnName("emirates_id_no")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("full_name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("int");

                    b.Property<string>("IdAttachment")
                        .HasColumnName("id_attachment")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("IdExpirationDate")
                        .HasColumnName("id_expiration_date")
                        .HasColumnType("date");

                    b.Property<bool?>("IsOwner")
                        .HasColumnName("is_owner")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnName("marital_status")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("Nationality")
                        .HasColumnName("nationality")
                        .HasColumnType("int");

                    b.Property<int?>("PartyId")
                        .HasColumnName("party_id")
                        .HasColumnType("int");

                    b.Property<int?>("PartyTypeValueId")
                        .HasColumnName("party_type_value_id")
                        .HasColumnType("int");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SignDate")
                        .HasColumnName("sign_date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("SignRequired")
                        .HasColumnName("sign_required")
                        .HasColumnType("bit");

                    b.Property<int?>("SignType")
                        .HasColumnName("sign_type")
                        .HasColumnType("int");

                    b.Property<string>("SignUrl")
                        .HasColumnName("sign_url")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool?>("Signed")
                        .HasColumnName("signed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TransactionId")
                        .HasColumnName("transaction_id")
                        .HasColumnType("int");

                    b.Property<string>("UnifiedNumber")
                        .HasColumnName("unified_number")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Nationality");

                    b.HasIndex("PartyId");

                    b.HasIndex("PartyTypeValueId");

                    b.HasIndex("TransactionId");

                    b.ToTable("application_party");
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationPartyExtraAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationPartyId")
                        .HasColumnName("application_party_id")
                        .HasColumnType("int");

                    b.Property<int?>("AttachmentId")
                        .HasColumnName("attachment_id")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentName")
                        .HasColumnName("attachment_name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AttachmentUrl")
                        .HasColumnName("attachment_url")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("CountryOfIssue")
                        .HasColumnName("country_of_Issue")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnName("expiration_date")
                        .HasColumnType("date");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Number")
                        .HasColumnName("number")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPartyId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CountryOfIssue");

                    b.ToTable("application_party_extra_attachment");
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("NextStageId")
                        .HasColumnName("next_stage_id")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int?>("StageId")
                        .HasColumnName("stage_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartEffectiveDate")
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("application_track");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("MeetingId")
                        .HasColumnName("meeting_id")
                        .HasColumnType("int");

                    b.Property<int?>("NotifyMe")
                        .HasColumnName("notify_me")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("calendar");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Country", b =>
                {
                    b.Property<int>("CntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CNT_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CntCapitalAr")
                        .HasColumnName("CNT_Capital_AR")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntCapitalEn")
                        .HasColumnName("CNT_Capital_EN")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("CntConIdFk")
                        .HasColumnName("CNT_CON_ID_FK")
                        .HasColumnType("int");

                    b.Property<string>("CntContinentAr")
                        .HasColumnName("CNT_Continent_AR")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntContinentEn")
                        .HasColumnName("CNT_Continent_EN")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntCountryAr")
                        .HasColumnName("CNT_Country_AR")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntCountryEn")
                        .HasColumnName("CNT_Country_EN")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntGlobalCode")
                        .HasColumnName("CNT_GLOBAL_CODE")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("CntIso2")
                        .HasColumnName("CNT_ISO2")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntIso3")
                        .HasColumnName("CNT_ISO3")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntOfficialNameAr")
                        .HasColumnName("CNT_Official_name_AR")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntOfficialNameEn")
                        .HasColumnName("CNT_Official_name_EN")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("CntRegIdFk")
                        .HasColumnName("CNT_REG_ID_FK")
                        .HasColumnType("int");

                    b.Property<string>("CntRegionAr")
                        .HasColumnName("CNT_Region_AR")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CntRegionEn")
                        .HasColumnName("CNT_Region_EN")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("CntId")
                        .HasName("country_PK");

                    b.ToTable("country");
                });

            modelBuilder.Entity("EngineCoreProject.Models.DocumentStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnName("file_path")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("IdUser")
                        .HasColumnName("id_user")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("document_storage");
                });

            modelBuilder.Entity("EngineCoreProject.Models.FileConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Extension")
                        .HasColumnName("extension")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaxSize")
                        .HasColumnName("max_size")
                        .HasColumnType("int");

                    b.Property<int?>("MinSize")
                        .HasColumnName("min_size")
                        .HasColumnType("int");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("file_configuration");
                });

            modelBuilder.Entity("EngineCoreProject.Models.GlobalDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("ReasonShortcut")
                        .HasColumnName("reason_shortcut")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("global_day_off");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime");

                    b.Property<string>("MeetingId")
                        .IsRequired()
                        .HasColumnName("meeting_id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("PasswordReq")
                        .HasColumnName("password_req")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnName("time_zone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnName("topic")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId")
                        .IsUnique()
                        .HasName("meeting_id_Uniqe");

                    b.HasIndex("UserId");

                    b.ToTable("meeting");
                });

            modelBuilder.Entity("EngineCoreProject.Models.MeetingParticipant", b =>
                {
                    b.Property<int>("MeetingId")
                        .HasColumnName("meeting_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("MeetingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("meeting_participant");
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotaryPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EmirateValueId")
                        .HasColumnName("emirate_value_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("EmirateValueId");

                    b.ToTable("notary_place");
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotificationAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnName("action_id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationTemplateId")
                        .HasColumnName("notification_template_id")
                        .HasColumnType("int");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTemplateId");

                    b.HasIndex("ActionId", "NotificationTemplateId")
                        .IsUnique()
                        .HasName("uq_action_id_notification_template_id");

                    b.ToTable("notification_action");
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Hostsetting")
                        .HasColumnName("hostsetting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("IsSent")
                        .HasColumnName("is_sent")
                        .HasColumnType("tinyint");

                    b.Property<string>("Lang")
                        .HasColumnName("lang")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("NotificationBody")
                        .IsRequired()
                        .HasColumnName("notification_body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationChannelId")
                        .HasColumnName("notification_channel_id")
                        .HasColumnType("int");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasColumnName("notification_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportValueId")
                        .HasColumnName("report_value_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendReportId")
                        .HasColumnName("send_report_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("SentCount")
                        .HasColumnName("sent_count")
                        .HasColumnType("tinyint");

                    b.Property<string>("ToAddress")
                        .HasColumnName("to_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("notification_log");
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NotificationNameShortcut")
                        .HasColumnName("notification_name_shortcut")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("NotificationNameShortcut")
                        .IsUnique()
                        .HasName("UQ__nameshortcut")
                        .HasFilter("[notification_name_shortcut] IS NOT NULL");

                    b.ToTable("notification_template");
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotificationTemplateDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyShortcut")
                        .HasColumnName("body_shortcut")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("ChangeAble")
                        .HasColumnName("change_able")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationChannelId")
                        .HasColumnName("notification_channel_id")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTemplateId")
                        .HasColumnName("notification_template_id")
                        .HasColumnType("int");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("TitleShortcut")
                        .HasColumnName("title_shortcut")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("NotificationChannelId");

                    b.HasIndex("NotificationTemplateId");

                    b.ToTable("notification_template_detail");
                });

            modelBuilder.Entity("EngineCoreProject.Models.OcrdocumentFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DocumentId")
                        .HasColumnName("documentId")
                        .HasColumnType("int");

                    b.Property<string>("FieldClass")
                        .HasColumnName("fieldClass")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<double?>("Score")
                        .HasColumnName("score")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Xmax")
                        .HasColumnType("int");

                    b.Property<int?>("Xmin")
                        .HasColumnType("int");

                    b.Property<int?>("Ymax")
                        .HasColumnType("int");

                    b.Property<int?>("Ymin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("OCRDocumentFields");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Ocrdocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BboxImg")
                        .HasColumnName("bboxImg")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentName")
                        .HasColumnName("documentName")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DocumentType")
                        .HasColumnName("documentType")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<double?>("Score")
                        .HasColumnName("score")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Xmax")
                        .HasColumnType("int");

                    b.Property<int?>("Xmin")
                        .HasColumnType("int");

                    b.Property<int?>("Ymax")
                        .HasColumnType("int");

                    b.Property<int?>("Ymin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OCRDocuments");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("int");

                    b.Property<string>("CollectionCenterFee")
                        .HasColumnName("collection_center_fee")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ConfirmationId")
                        .HasColumnName("confirmation_id")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EDirhamFee")
                        .HasColumnName("e_dirham_fee")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("EServiceData")
                        .HasColumnName("e_service_data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNo")
                        .HasColumnName("invoice_no")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnName("payment_date")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethodType")
                        .HasColumnName("payment_method_type")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PaymentSource")
                        .HasColumnName("payment_source")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PaymentStatus")
                        .HasColumnName("payment_status")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PaymentType")
                        .HasColumnName("payment_type")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("float");

                    b.Property<string>("Pun")
                        .HasColumnName("pun")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("SecureHash")
                        .HasColumnName("secure_hash")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("int");

                    b.Property<int?>("StageId")
                        .HasColumnName("stage_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("StatusMessage")
                        .HasColumnName("status_message")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("TransactionResponseDate")
                        .HasColumnName("transaction_response_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("EngineCoreProject.Models.QueueProcesses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpectedDateTime")
                        .HasColumnName("expected_date_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProcessNo")
                        .IsRequired()
                        .HasColumnName("process_no")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Provider")
                        .HasColumnName("provider")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ServiceKindNo")
                        .HasColumnName("service_kind_no")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint");

                    b.Property<int>("TicketId")
                        .HasColumnName("ticket_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessNo")
                        .IsUnique()
                        .HasName("unique_process_no");

                    b.HasIndex("ServiceKindNo");

                    b.HasIndex("ProcessNo", "ServiceKindNo")
                        .IsUnique()
                        .HasName("uq_queue_processes_process_no_service_kind_no");

                    b.ToTable("queue_processes");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("role");
                });

            modelBuilder.Entity("EngineCoreProject.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnName("claim-type")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnName("claim-value")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("RoleId")
                        .HasColumnName("role-id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role-claim");
                });

            modelBuilder.Entity("EngineCoreProject.Models.ServiceKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeCount")
                        .HasColumnName("employee_count")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedTimePerProcess")
                        .HasColumnName("estimated_time_per_process")
                        .HasColumnType("int");

                    b.Property<string>("ServiceKindNameShortcut")
                        .IsRequired()
                        .HasColumnName("service_kind_name_shortcut")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnName("symbol")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasName("UC_symbol");

                    b.ToTable("service_kind");
                });

            modelBuilder.Entity("EngineCoreProject.Models.StageMasterAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("MasterAttachmentId")
                        .HasColumnName("master_attachment_id")
                        .HasColumnType("int");

                    b.Property<bool?>("Required")
                        .HasColumnName("required")
                        .HasColumnType("bit");

                    b.Property<int?>("StageId")
                        .HasColumnName("stage_id")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnName("template_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MasterAttachmentId");

                    b.HasIndex("StageId");

                    b.ToTable("stage_master_attachment");
                });

            modelBuilder.Entity("EngineCoreProject.Models.SysExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnName("action_id")
                        .HasColumnType("int");

                    b.Property<int>("ExecutionOrder")
                        .HasColumnName("execution_order")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .HasColumnName("method")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Parameter1")
                        .HasColumnName("parameter1")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Parameter2")
                        .HasColumnName("parameter2")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ToExecute")
                        .IsRequired()
                        .HasColumnName("to_execute")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("sys_execution");
                });

            modelBuilder.Entity("EngineCoreProject.Models.SysLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnName("lang")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("sys_language");
                });

            modelBuilder.Entity("EngineCoreProject.Models.SysLookupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("sys_lookup_type");
                });

            modelBuilder.Entity("EngineCoreProject.Models.SysLookupValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LookupTypeId")
                        .HasColumnName("lookup_type_id")
                        .HasColumnType("int");

                    b.Property<string>("Shortcut")
                        .HasColumnName("shortcut")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LookupTypeId");

                    b.HasIndex("Shortcut")
                        .IsUnique()
                        .HasName("sys_lookup_value_UN")
                        .HasFilter("[shortcut] IS NOT NULL");

                    b.ToTable("sys_lookup_value");
                });

            modelBuilder.Entity("EngineCoreProject.Models.SysTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lang")
                        .HasColumnName("lang")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Shortcut")
                        .HasColumnName("shortcut")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Shortcut")
                        .HasName("sys_translation_shortcut_IDX");

                    b.HasIndex("Shortcut", "Lang")
                        .IsUnique()
                        .HasName("sys_translation_shortcut_lang_UN")
                        .HasFilter("[shortcut] IS NOT NULL AND [lang] IS NOT NULL");

                    b.ToTable("sys_translation");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Tab", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnName("link")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TabNameShortcut")
                        .IsRequired()
                        .HasColumnName("tab_name_shortcut")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("tab");
                });

            modelBuilder.Entity("EngineCoreProject.Models.TableName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Db")
                        .HasColumnName("db")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameAr")
                        .HasColumnName("name_ar")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameEn")
                        .HasColumnName("name_en")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("table_name");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TitleShortcut")
                        .HasColumnName("title_shortcut")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("template");
                });

            modelBuilder.Entity("EngineCoreProject.Models.TemplateAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnName("attachment_id")
                        .HasColumnType("int");

                    b.Property<bool?>("Required")
                        .HasColumnName("required")
                        .HasColumnType("bit");

                    b.Property<int>("TemplateId")
                        .HasColumnName("template_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("TemplateId");

                    b.ToTable("template_attachment");
                });

            modelBuilder.Entity("EngineCoreProject.Models.TemplateParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PartyId")
                        .HasColumnName("party_id")
                        .HasColumnType("int");

                    b.Property<bool?>("Required")
                        .HasColumnName("required")
                        .HasColumnType("bit");

                    b.Property<bool?>("SignRequired")
                        .HasColumnName("sign_required")
                        .HasColumnType("bit");

                    b.Property<int>("TemplateId")
                        .HasColumnName("template_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("TemplateId");

                    b.ToTable("template_party");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TemplateId")
                        .HasColumnName("template_id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("TemplateId");

                    b.ToTable("term");
                });

            modelBuilder.Entity("EngineCoreProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("AreaId")
                        .HasColumnName("area_id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailLang")
                        .HasColumnName("email_lang")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmiratesId")
                        .HasColumnName("emirates_id")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndEffectiveDate")
                        .HasColumnName("end_effective_date")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnName("last_updated_date")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("NatId")
                        .HasColumnName("nat_id")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("NotaryPlaceId")
                        .HasColumnName("notary_place_id")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationType")
                        .HasColumnName("notification_type")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileStatus")
                        .HasColumnName("profile_status")
                        .HasColumnType("int");

                    b.Property<string>("RecStatus")
                        .HasColumnName("rec_status")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("int");

                    b.Property<string>("SecurityQuestionAnswer")
                        .HasColumnName("security_question_answer")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("SecurityQuestionId")
                        .HasColumnName("security_question_id")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsLang")
                        .HasColumnName("SMS_lang")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartEffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_effective_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("TelNo")
                        .HasColumnName("tel_no")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user-claim");
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex("UserId");

                    b.ToTable("user-login");
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("user-role");
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("LogInProvider")
                        .IsRequired()
                        .HasColumnName("logInProvider")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user-token");
                });

            modelBuilder.Entity("EngineCoreProject.Models.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<int>("DayOfWeek")
                        .HasColumnName("day_of_week")
                        .HasColumnType("int");

                    b.Property<int>("FinishAt")
                        .HasColumnName("finish_at")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("finish_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<int>("StartFrom")
                        .HasColumnName("start_from")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkingTimeNameShortcut")
                        .IsRequired()
                        .HasColumnName("working_time_name_shortcut")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("working_hours");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmAction", b =>
                {
                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "ActionType")
                        .WithMany("AdmAction")
                        .HasForeignKey("ActionTypeId")
                        .HasConstraintName("FK_adm_action_sys_lookup_value");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmService", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "CreatedByNavigation")
                        .WithMany("AdmServiceCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("adm_service_created_by_FK");

                    b.HasOne("EngineCoreProject.Models.User", "LastUpdatedByNavigation")
                        .WithMany("AdmServiceLastUpdatedByNavigation")
                        .HasForeignKey("LastUpdatedBy")
                        .HasConstraintName("adm_service_updated_by_FK");

                    b.HasOne("EngineCoreProject.Models.ServiceKind", "ServiceKindNoNavigation")
                        .WithMany("AdmService")
                        .HasForeignKey("ServiceKindNo")
                        .HasConstraintName("FK_service_service_kind");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmStage", b =>
                {
                    b.HasOne("EngineCoreProject.Models.AdmService", "Service")
                        .WithMany("AdmStage")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_adm_stage_adm_service")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "StageType")
                        .WithMany("AdmStage")
                        .HasForeignKey("StageTypeId")
                        .HasConstraintName("adm_stage_stage_type_id_FK");
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmStageAction", b =>
                {
                    b.HasOne("EngineCoreProject.Models.AdmAction", "Action")
                        .WithMany("AdmStageAction")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_adm_stage_action_adm_action");

                    b.HasOne("EngineCoreProject.Models.User", "CreatedByNavigation")
                        .WithMany("AdmStageActionCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("stage_action_created_by_FK");

                    b.HasOne("EngineCoreProject.Models.User", "LastUpdatedByNavigation")
                        .WithMany("AdmStageActionLastUpdatedByNavigation")
                        .HasForeignKey("LastUpdatedBy")
                        .HasConstraintName("stage_action_updated_by_FK");

                    b.HasOne("EngineCoreProject.Models.AdmStage", "Stage")
                        .WithMany("AdmStageAction")
                        .HasForeignKey("StageId")
                        .HasConstraintName("FK_adm_stage_action_adm_stage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EngineCoreProject.Models.AdmStageActionRole", b =>
                {
                    b.HasOne("EngineCoreProject.Models.AdmAction", "Action")
                        .WithMany("AdmStageActionRole")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_adm_stage_action_role_adm_action")
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.Role", "Role")
                        .WithMany("AdmStageActionRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_adm_stage_action_role_role_id")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.AppTransaction", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Application", "Application")
                        .WithOne("AppTransaction")
                        .HasForeignKey("EngineCoreProject.Models.AppTransaction", "ApplicationId")
                        .HasConstraintName("transaction_application_id__FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EngineCoreProject.Models.Application", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "CreatedByNavigation")
                        .WithMany("ApplicationCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("application_created_by_FK");

                    b.HasOne("EngineCoreProject.Models.AdmStage", "CurrentStage")
                        .WithMany("Application")
                        .HasForeignKey("CurrentStageId")
                        .HasConstraintName("application_current_stage_id_FK");

                    b.HasOne("EngineCoreProject.Models.User", "LastUpdatedByNavigation")
                        .WithMany("ApplicationLastUpdatedByNavigation")
                        .HasForeignKey("LastUpdatedBy")
                        .HasConstraintName("application_updated_by_FK");

                    b.HasOne("EngineCoreProject.Models.AdmService", "Service")
                        .WithMany("Application")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("applications_service_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EngineCoreProject.Models.Template", "Template")
                        .WithMany("Application")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("application_template_id_FK")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationAttachment", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Application", "Application")
                        .WithMany("ApplicationAttachment")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("application_attachments_application_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "Attachment")
                        .WithMany("ApplicationAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("application_attachment_lookup_value_FK")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EngineCoreProject.Models.User", "CreatedByNavigation")
                        .WithMany("ApplicationAttachmentCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("application_attachment_created_by_FK");

                    b.HasOne("EngineCoreProject.Models.User", "LastUpdatedByNavigation")
                        .WithMany("ApplicationAttachmentLastUpdatedByNavigation")
                        .HasForeignKey("LastUpdatedBy")
                        .HasConstraintName("application_attachment_updated_by_FK");
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationParty", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Country", "NationalityNavigation")
                        .WithMany("ApplicationParty")
                        .HasForeignKey("Nationality")
                        .HasConstraintName("application_party_nationality_FK");

                    b.HasOne("EngineCoreProject.Models.User", "Party")
                        .WithMany("ApplicationParty")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("applications_parties_user_FK")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "PartyTypeValue")
                        .WithMany("ApplicationParty")
                        .HasForeignKey("PartyTypeValueId")
                        .HasConstraintName("application_party_id_lookup_value_FK");

                    b.HasOne("EngineCoreProject.Models.AppTransaction", "Transaction")
                        .WithMany("ApplicationParty")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("application_party_transaction_id_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationPartyExtraAttachment", b =>
                {
                    b.HasOne("EngineCoreProject.Models.ApplicationParty", "ApplicationParty")
                        .WithMany("ApplicationPartyExtraAttachment")
                        .HasForeignKey("ApplicationPartyId")
                        .HasConstraintName("party_extra_attachment_application_party_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "Attachment")
                        .WithMany("ApplicationPartyExtraAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("application_party_extra_attachment_attachment_id_FK")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EngineCoreProject.Models.Country", "CountryOfIssueNavigation")
                        .WithMany("ApplicationPartyExtraAttachment")
                        .HasForeignKey("CountryOfIssue")
                        .HasConstraintName("application_party_extra_attachment_FK")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("EngineCoreProject.Models.ApplicationTrack", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Application", "Application")
                        .WithMany("ApplicationTrack")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("application_track_application_id_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("ApplicationTrack")
                        .HasForeignKey("UserId")
                        .HasConstraintName("application_track_user_id_FK")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("EngineCoreProject.Models.Calendar", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Meeting", "Meeting")
                        .WithMany("Calendar")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_calendar_meeting_id_meeting_id");

                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("Calendar")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_calendar_calendar_user_id")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.DocumentStorage", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "IdUserNavigation")
                        .WithMany("DocumentStorage")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_document_storage_user")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.FileConfiguration", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "CreatedByNavigation")
                        .WithMany("FileConfigurationCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("file_configuration_created_by _FK")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EngineCoreProject.Models.User", "LastUpdatedByNavigation")
                        .WithMany("FileConfigurationLastUpdatedByNavigation")
                        .HasForeignKey("LastUpdatedBy")
                        .HasConstraintName("file_configuration_updated_by_FK");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Meeting", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("Meeting")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_meeting_user_id_users_user_id")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.MeetingParticipant", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Meeting", "Meeting")
                        .WithMany("MeetingParticipant")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_meeting_participant_meeting_id_meeting_id")
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("MeetingParticipant")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_meeting_participant_userid_users_id")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotaryPlace", b =>
                {
                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "EmirateValue")
                        .WithMany("NotaryPlace")
                        .HasForeignKey("EmirateValueId")
                        .HasConstraintName("notary_place_emirate_value_FK");
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotificationAction", b =>
                {
                    b.HasOne("EngineCoreProject.Models.AdmAction", "Action")
                        .WithMany("NotificationAction")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_notification_action_adm_action")
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.NotificationTemplate", "NotificationTemplate")
                        .WithMany("NotificationAction")
                        .HasForeignKey("NotificationTemplateId")
                        .HasConstraintName("notification_action_notification_template_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.NotificationTemplateDetail", b =>
                {
                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "NotificationChannel")
                        .WithMany("NotificationTemplateDetail")
                        .HasForeignKey("NotificationChannelId")
                        .HasConstraintName("FK_notification_template_channel_id_lookup_value")
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.NotificationTemplate", "NotificationTemplate")
                        .WithMany("NotificationTemplateDetail")
                        .HasForeignKey("NotificationTemplateId")
                        .HasConstraintName("FK_notification_template_detail_notification_template_id")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.OcrdocumentFields", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Ocrdocuments", "Document")
                        .WithMany("OcrdocumentFields")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK__OCRDocume__docum__0A295FE6");
                });

            modelBuilder.Entity("EngineCoreProject.Models.Payment", b =>
                {
                    b.HasOne("EngineCoreProject.Models.AdmService", "Service")
                        .WithMany("Payment")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("payments_service_FK");

                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("Payment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("payments_user_FK");
                });

            modelBuilder.Entity("EngineCoreProject.Models.QueueProcesses", b =>
                {
                    b.HasOne("EngineCoreProject.Models.ServiceKind", "ServiceKindNoNavigation")
                        .WithMany("QueueProcesses")
                        .HasForeignKey("ServiceKindNo")
                        .HasConstraintName("FK_queue_processes_service_no")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.RoleClaim", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Role", "Role")
                        .WithMany("RoleClaim")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_role-claim_role-id")
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.StageMasterAttachment", b =>
                {
                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "MasterAttachment")
                        .WithMany("StageMasterAttachment")
                        .HasForeignKey("MasterAttachmentId")
                        .HasConstraintName("FK_stage_master_attachment_sys_lookup_value");

                    b.HasOne("EngineCoreProject.Models.AdmStage", "Stage")
                        .WithMany("StageMasterAttachment")
                        .HasForeignKey("StageId")
                        .HasConstraintName("FK_stage_master_attachment_adm_stage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EngineCoreProject.Models.SysExecution", b =>
                {
                    b.HasOne("EngineCoreProject.Models.AdmAction", "Action")
                        .WithMany("SysExecution")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("sys_execution_action_id_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.SysLookupValue", b =>
                {
                    b.HasOne("EngineCoreProject.Models.SysLookupType", "LookupType")
                        .WithMany("SysLookupValue")
                        .HasForeignKey("LookupTypeId")
                        .HasConstraintName("FK_LookupValue_LookupType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EngineCoreProject.Models.Template", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "CreatedByNavigation")
                        .WithMany("TemplateCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("template_created_by_FK");

                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "DocumentType")
                        .WithMany("Template")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("template_docType_FK");

                    b.HasOne("EngineCoreProject.Models.User", "LastUpdatedByNavigation")
                        .WithMany("TemplateLastUpdatedByNavigation")
                        .HasForeignKey("LastUpdatedBy")
                        .HasConstraintName("template_updated_by_FK");
                });

            modelBuilder.Entity("EngineCoreProject.Models.TemplateAttachment", b =>
                {
                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "Attachment")
                        .WithMany("TemplateAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("template_attachment_attachmentId_FK")
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.Template", "Template")
                        .WithMany("TemplateAttachment")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("template_attachment_template_id_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.TemplateParty", b =>
                {
                    b.HasOne("EngineCoreProject.Models.SysLookupValue", "Party")
                        .WithMany("TemplateParty")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("template_party_partyId_FK")
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.Template", "Template")
                        .WithMany("TemplateParty")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("template_party_template_id_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.Term", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "CreatedByNavigation")
                        .WithMany("TermCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("term_created_by_FK");

                    b.HasOne("EngineCoreProject.Models.User", "LastUpdatedByNavigation")
                        .WithMany("TermLastUpdatedByNavigation")
                        .HasForeignKey("LastUpdatedBy")
                        .HasConstraintName("term_updated_FK");

                    b.HasOne("EngineCoreProject.Models.Template", "Template")
                        .WithMany("Term")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("term_template_id_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EngineCoreProject.Models.User", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("user_role_FK")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserClaim", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("UserClaim")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserLogin", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("UserLogin")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserRole", b =>
                {
                    b.HasOne("EngineCoreProject.Models.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineCoreProject.Models.UserToken", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", "User")
                        .WithMany("UserToken")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_user-token_user")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EngineCoreProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
